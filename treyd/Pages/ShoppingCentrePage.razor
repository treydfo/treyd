@page "/soelumidstoedin/{text?}"

@using DataLibrary
@using Microsoft.Extensions.Configuration

@inject IDataAccess _data
@inject IConfiguration _config
@inject StateContainer StateContainer
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container">
    <div class="mt-4 mb-5 p-1">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-2 col-xl-2">
                <h3 class="pb-4 pt-4 text-info text-center">SØLUMIÐSTØÐIN</h3>
            </div>
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-10 col-xl-10">
                <Toolbar GetSearchTerm="GetSearchTerm" GetLgSidebarToggle="GetLgSidebarToggle"></Toolbar>
            </div>
        </div>
        <div class="row">
            <div class="@LgUpSidebarClasses md-up-sidebar lg-up-sidebar"
                 style="--lg-up-sidebar-display: @lgSidebarDisplay; --md-down-sidebar-display: @mdSidebarDisplay">
                <ShopSidebar />
            </div>

            <div class="col-xs-12 col-sm-12 col-md-12 @ProductListClass">
                <div class="row">
                    <nav>
                        <div class="nav nav-tabs flex-sm-row" id="nav-tab" role="tablist">
                            <button class="flex-sm-fill text-sm-center nav-link text-info active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true">Vørur</button>
                            <button class="flex-sm-fill text-sm-center nav-link text-info" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">Handlar</button>
                        </div>
                    </nav>
                    <div class="tab-content" id="nav-tabContent">
                        <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">
                            <div class="flex-wrapper row wow fadeIn">
                                <ProductList SearchTerm="@searchTerm"></ProductList>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">
                            <div class="flex-wrapper row wow fadeIn">
                                <div class="prod">
                                    <StoreList />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (IsSmall || IsMedium)
{
    <HandheldToolbar Filter="true" Cart="true" Menu="true" Wishlist="true" IsFilterShown="GetHandheldSidebarToggle" />
    // Modal Backdrop for the Handheld Sidebar
    <div class="modal-backdrop" style="--modal-backdrop-display: @modalBackdropDisplay" />
} @*Hetta skal verða við fyri at breakpoints virka í kotuni*@
<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="IsSmall" />
<MediaQuery Media="@Breakpoints.OnlyMedium" @bind-Matches="IsMedium" />
<MediaQuery Media="@Breakpoints.LargeUp" @bind-Matches="IsLarge" />

@code {
    [Parameter] public string text { get; set; }

    private bool IsSmall = false;
    private bool IsMedium = false;
    private bool IsLarge = false;

    private string lgSidebarDisplay = "block";
    private string mdSidebarDisplay = "none";
    private string modalBackdropDisplay = "none";

    private string searchTerm = "";

    private bool? toggleHandheldSidebar = true;
    private bool toggleLargeSidebar = true;

    private string LgUpSidebarClasses = " col-lg-2 col-xl-2";

    private string ProductListClass = " col-lg-10 col-xl-10";

    protected override async Task OnInitializedAsync()
    {
        await ((TreydAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();

        if (text != "quicksearch")
        {
            StateContainer.ClearFilters();
        }
    }

    public void GetSearchTerm(string newSearchTerm)
    {
        searchTerm = newSearchTerm;
    }

    /// <summary>
    /// Toggle the handheld Sidebar that's only shown for medium-down screens.
    /// </summary>
    /// <param name="newToggle">Toggle (if true) the handheld sidebar that's only shown for medium-down screens. Gets it's input from the Event Callback from the Handheld Toolbar.</param>
    public void GetHandheldSidebarToggle(bool? pToggleHandheldSidebar)
    {
        toggleHandheldSidebar = pToggleHandheldSidebar;

        if (toggleHandheldSidebar == true)
        {
            modalBackdropDisplay = "display";
            mdSidebarDisplay = "display";

            toggleHandheldSidebar = false;
        }
        else
        {
            modalBackdropDisplay = "none";
            mdSidebarDisplay = "none";

            toggleHandheldSidebar = true;
        }
    }

    /// <summary>
    /// Toggle the large Sidebar that's only shown for large screens.
    /// </summary>
    /// <param name="newSidebarToggle"></param>
    public void GetLgSidebarToggle(bool pToggleLargeSidebar)
    {
        toggleLargeSidebar = pToggleLargeSidebar;

        if (toggleLargeSidebar == true)
        {
            lgSidebarDisplay = "block";
            LgUpSidebarClasses = " col-lg-2 col-xl-2";

            ProductListClass = " col-lg-10 col-xl-10";

            toggleLargeSidebar = false;
        }
        else
        {
            lgSidebarDisplay = "none";
            LgUpSidebarClasses = "";

            ProductListClass = " col-lg-12 col-xl-12";

            toggleLargeSidebar = true;
        }
    }
}