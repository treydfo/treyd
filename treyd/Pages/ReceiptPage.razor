@page "/brukari/kassi/kvittan"

@using DataLibrary
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.WebUtilities;

@inject IDataAccess _data
@inject IConfiguration _config
@inject StateContainer StateContainer
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <IndexRedirect />
    </NotAuthorized>
</AuthorizeView>

<div class="container mb-5">
    <div class="py-5 text-center" style="padding-top: 0 !important;">
        <h1 class="text-info mt-4">Kassi</h1>
    </div>

    <div class="row g-5">
        <div class="col-12">
            <div class="row">
                <ul id="progressbar" class="text-center">
                    <li class="@cartActive"></li>
                    <li class="@paymentActive"></li>
                    <li class="@recieptActive"></li>
                </ul>
            </div>
            <div class="row">
                <ul class="progress-text text-center">
                    <li>Kurv</li>
                    <li>Gjalding</li>
                    <li>Kvittan</li>
                </ul>
            </div>
            <nav style="display: none;">
                <div class="nav nav-tabs flex-sm-row" id="progressbar" role="tablist">
                    <button class="flex-sm-fill btn-lg nav-link " id="nav-cart-tab" data-bs-toggle="tab" type="button" role="tab" aria-controls="nav-cart" aria-selected="true">
                        @*Tín kurv <i class="fas fa-check-circle" style="@cartSuccess"></i>*@
                    </button>
                    <button class="flex-sm-fill btn-lg nav-link " id="nav-info-tab" data-bs-toggle="tab" type="button" role="tab" aria-controls="nav-info" aria-selected="false">
                        @*Persónsupplýsingar <i class="fas fa-check-circle" style="@infoSuccess"></i><i class="fas fa-exclamation-circle" style="@infoDanger"></i>*@
                    </button>
                    <button class="flex-sm-fill btn-lg nav-link " id="nav-payment-tab" data-bs-toggle="tab" type="button" role="tab" aria-controls="nav-payment" aria-selected="false">
                        @*Gjalding <i class="fas fa-check-circle" style="@paymentSuccess"></i><i class="fas fa-exclamation-circle" style="@paymentDanger"></i>*@
                    </button>
                    <button class="flex-sm-fill btn-lg nav-link @recieptBtnActive" id="nav-reciept-tab" data-bs-toggle="tab" type="button" role="tab" aria-controls="nav-reciept" aria-selected="false" @onclick="ReceiptSection">
                        @*Kvittan <i class="fas fa-check-circle" style="@recieptSuccess"></i><i class="fas fa-exclamation-circle" style="@recieptDanger"></i>*@
                    </button>
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="d-flex justify-content-between align-items-center pb-4 pt-4" style="font-size: 30px;">
                    <span class="text-info">Kvittan</span>
                </div>
                <div class="tab-pane fade show active" id="nav-reciept" role="tabpanel" aria-labelledby="nav-reciept-tab">
                    <div class="flex-wrapper row wow fadeIn text-info">
                        @if (displaySuccessAlert == true)
                        {
                            <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
                                Títt keyp er nú framt!
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                            @if (OrderItems != null && OrderItems.Count > 0)
                            {
                                <div class="row text-info">Bíleggingarnummar: @this.orderNumber</div>
                                <div class="row">
                                    <table class="table-light text-info">
                                        <thead>
                                            <tr>
                                                <th></th>
                                                <th>Vøruheiti</th>
                                                <th class="text-center">Nøgd</th>
                                                <th class="text-center">Prísur</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in this.OrderItems)
                                            {
                                                this.total = item.Total;
                                                <tr>
                                                    <td><div class="align-items-center overflow-hidden" style="max-width: 180px; max-height: 100px; min-width: 180px; min-height: 100px; background: url(@item.ImagePath); background-position: 50% 50%; background-size: cover;"></div></td>
                                                    <td>@item.Name</td>
                                                    <td class="text-center">@item.Amount</td>
                                                    <td class="text-center">@item.Subtotal.ToString("N2")</td>
                                                </tr>
                                            }
                                            <tr>
                                                <td></td>
                                                <td></td>
                                                <td class="text-end">Í alt:</td>
                                                <td class="text-center">@this.total.ToString("N2")</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            }
                        }
                        else if (displayDangerAlert == true)
                        {
                            <div class="alert alert-danger alert-dismissible fade show mt-4" role="alert">
                                Keypið varð ikki gjøgnumført...
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }
                        <div class="row pt-4 text-center">
                            <div class="col text-center">
                                <a class="btn btn-success btn-lg" type="button" href="/soelumidstoedin">
                                    Sølumiðstøðin
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] CartStateProvider CartStateProvider { get; set; }

    [Parameter] public int Id { get; set; }

    protected OrderModel Order { get; set; }
    private ProductModel ProductModel { get; set; }

    private List<ProductModel> Products;
    private List<OrderItemsModel> OrderItems;

    private string cartActive;
    private string paymentActive;
    private string recieptActive;

    private string cartBtnActive;
    private string paymentBtnActive;
    private string recieptBtnActive;

    private bool displaySuccessAlert = false;
    private bool displayDangerAlert = false;

    private string orderNumber = "";
    private double total = 0;

    protected override async Task OnInitializedAsync()
    {
        await ((TreydAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();

        ReceiptSection();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri); //you can use IURIHelper for older versions

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            this.orderNumber = id.First();
        }

        await VerifyPayment();
    }

    public void ReceiptSection()
    {
        this.cartActive = "active";
        this.paymentActive = "active";
        this.recieptActive = "active";
        this.cartBtnActive = "";
        this.paymentBtnActive = "";
        this.recieptBtnActive = "active";
    }

    protected async Task<bool> LoadOrder()
    {
        try
        {
            string sql = "select * from orders join payments on orders.PaymentID = payments.PaymentID where OrderNumber = @OrderNumber";
            Order = await _data.QuerySingle<OrderModel, dynamic>(sql, new { OrderNumber = long.Parse(this.orderNumber) }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> LoadProducts()
    {
        try
        {
            string sql = "select * from products";
            Products = await _data.LoadData<ProductModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> LoadOrderItems()
    {
        try
        {
            string sql = "select * from order_items " +
                    "inner join products " +
                    "on order_items.ProductID = products.ProductID " +
                    "inner join orders " +
                    "on order_items.OrderID = orders.OrderID " +
                    "where orders.OrderNumber = @OrderNumber";
            OrderItems = await _data.LoadData<OrderItemsModel, dynamic>(sql, new { OrderNumber = this.orderNumber }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> VerifyPayment()
    {
        await LoadOrder();
        await LoadProducts();

        if (Order != null)
        {
            try
            {
                this.displaySuccessAlert = true;

                await SaveOrderItems();
                await LoadOrderItems();
                await DeleteCartItems();

                return await Task.FromResult(true);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);

                return await Task.FromResult(false);
            }
        }
        else
        {
            this.displayDangerAlert = true;

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> SaveOrderItems()
    {
        if (CartStateProvider.Cart.CartItems != null && CartStateProvider.Cart.CartItems.Count > 0)
        {
            try
            {
                foreach (var item in CartStateProvider.Cart.CartItems)
                {
                    int ItemID = item.Product.ProductID;

                    foreach (var product in Products)
                    {
                        if (product.ProductID == ItemID)
                        {
                            string sql = "insert into order_items (Amount, Subtotal, OrderID, ProductID, Status, Registered)" +
                            "values (@Amount, @Subtotal, @OrderID, @ProductID, @Status, @Registered);";

                            await _data.SaveData(sql, new
                            {
                                Amount = item.Quantity,
                                Subtotal = item.Product.Price,
                                OrderID = Order.OrderID,
                                ProductID = ItemID,
                                Status = "Pending",
                                Registered = DateTime.Now
                            }
                            , _config.GetConnectionString("default"));

                            string sql1 = "update products set Quantity = @Quantity where ProductID = @ProductID";

                            int quantity = product.Quantity - item.Quantity;

                            if (quantity == 0 || quantity < 0)
                            {
                                quantity = 0;
                                item.Product.InStock = false;
                            }

                            await _data.SaveData(sql1, new
                            {
                                ProductID = item.Product.ProductID,
                                Quantity = quantity,
                            }
                            , _config.GetConnectionString("default"));
                        }
                    }
                }

                return await Task.FromResult(true);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);

                return await Task.FromResult(false);
            }
        }
        else
        {
            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> DeleteCartItems()
    {
        try
        {
            CartStateProvider.Cart.CartItems.Clear(); // Removing items from cart
            await CartStateProvider.SaveChangesAsync(); // Update cart and save to local storage

            CartStateProvider.OnChange += StateHasChanged;

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    public void Dispose()
    {
        CartStateProvider.OnChange -= StateHasChanged;
    }
}