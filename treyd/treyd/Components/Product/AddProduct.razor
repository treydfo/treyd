@using DataLibrary
@using Microsoft.Extensions.Configuration

@inject IDataAccess _data
@inject IConfiguration _config
@inject StateContainer StateContainer 

<div class="container">
    @*<div class="py-5 text-center" style="padding-top: 0 !important;">
        <h2 class="pt-4">Skráset vøru</h2>
    </div>*@

    <div class="row g-5">
        <div class="col-md-5 col-lg-4 order-md-last">
            @if (imagePaths == null || imagePaths.Count == 0)
            {
                <label id="DropArea" for="files" class="btn">Legg mynd afturat</label>
                <InputFile id="files" OnChange="OnInputFileChange" multiple />
            }
            else
            {
                @foreach (var imagePath in imagePaths)
                {
                    <img style="object-fit: contain;" src="@imagePath" />
                    <br />
                    <br />
                    <button class="btn btn-outline-danger" type="button" @onclick="@(e => RemoveFile(imagePath))">Strika mynd</button>
                    <hr />
                }
            }
        </div>
        <div class="col-md-7 col-lg-8">
            <EditForm Model="@Product" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="row g-3">
                    <div class="col-sm-6">
                        <SfTextBox CssClass="e-outline" Placeholder="Vøruheiti" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@Product.Name"></SfTextBox>
                        <ValidationMessage style="color: red;" For="@(() => Product.Name)" />
                    </div>

                    <div class="col-sm-6">
                        <SfTextBox CssClass="e-outline" Placeholder="Vørunummar" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@Product.ProductNumber"></SfTextBox>
                        <ValidationMessage style="color: red;" For="@(() => Product.ProductNumber)" />
                    </div>

                    <div class="col-sm-3">
                        <SfNumericTextBox CssClass="e-outline" TValue="float" Placeholder="Prísur" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@Product.Price"></SfNumericTextBox>
                        <ValidationMessage style="color: red;" For="@(() => Product.Price)" />
                    </div>

                    <div class="col-sm-2">
                        <SfNumericTextBox CssClass="e-outline" TValue="int" Placeholder="Avsláttur (%)" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@Product.Discount"></SfNumericTextBox>
                        <ValidationMessage style="color: red;" For="@(() => Product.Discount)" />
                    </div>

                    <div class="col-sm-3">
                        <SfNumericTextBox CssClass="e-outline" TValue="int" Placeholder="Nøgd" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@Product.Quantity"></SfNumericTextBox>
                        <ValidationMessage style="color: red;" For="@(() => Product.Quantity)" />
                    </div>

                    <div class="col-sm-2">
                        <span>Á goymslu </span><SfCheckBox TChecked="bool" @bind-Checked="@Product.InStock"></SfCheckBox>
                        <ValidationMessage style="color: red;" For="@(() => Product.InStock)" />
                    </div>

                    <div class="col-sm-2">
                        <span>Set til sølu </span><SfCheckBox TChecked="bool" @bind-Checked="@Product.Published"></SfCheckBox>
                        <ValidationMessage style="color: red;" For="@(() => Product.Published)" />
                    </div>

                    <div class="col-12">
                        <SfTextBox CssClass="e-outline" Placeholder="Leinki til mynd" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@Product.ImagePath"></SfTextBox>
                        <ValidationMessage style="color: red;" For="@(() => Product.ImagePath)" />
                    </div>

                    <div class="col-12">
                        <SfTextBox CssClass="e-outline" Placeholder="Vørulýsing" FloatLabelType="@FloatLabelType.Auto" Multiline="true" @bind-Value="@Product.Description"></SfTextBox>
                        <ValidationMessage style="color: red;" For="@(() => Product.Description)" />
                    </div>

                    <div class="col-12">
                        <InputSelect class="form-control" @bind-Value="@Product.Category">
                            <option value="vel">Vel vørubólk</option>
                            @if (Categories != null && Categories.Count != 0)
                            {
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.Name">@category.Name</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>

                <hr class="my-4">

                <button class="w-100 btn btn-success btn-lg" type="submit">Skráset vøru</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Seller { get; set; }

    private List<CategoryModel> Categories;
    private ProductModel Product = new ProductModel();
    private List<string> imagePaths = new List<string>();
    private string imageUrl = "";

    protected override async Task OnInitializedAsync()
    {
        Product = new ProductModel(); // Reset EditForm Inputs

        await LoadCategories();
    }

    protected async Task<bool> LoadCategories()
    {
        try
        {
            string sql = "select * from categories";
            Categories = await _data.LoadData<CategoryModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> HandleValidSubmit()
    {
        try
        {
            string sql = "insert into products (ProductNumber, Name, Description, Price, Discount, Quantity, ImagePath, InStock, Category, Seller, Published, Producer, LastUpdated, UpdatedBy, DateAdded)" +
                            "values (@ProductNumber, @Name, @Description, @Price, @Discount, @Quantity, @ImagePath, @InStock, @Category, @Seller, @Published, @Producer, @LastUpdated, @UpdatedBy, @DateAdded);";

            if (Product.Quantity > 0)
            {
                Product.InStock = true;
            }

            await _data.SaveData(sql, new
            {
                ProductNumber = Product.ProductNumber,
                Name = Product.Name,
                Description = Product.Description,
                Price = Product.Price,
                Discount = Product.Discount,
                Quantity = Product.Quantity,
                ImagePath = this.imageUrl,
                InStock = Product.InStock,
                Category = Product.Category,
                Seller = this.Seller,
                Published = Product.Published,
                Producer = "",
                LastUpdated = DateTime.Now,
                UpdatedBy = this.Seller,
                DateAdded = DateTime.Now
            }
            , _config.GetConnectionString("default"));

            await OnInitializedAsync();
            imagePaths = null;

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    private async Task<bool> OnInputFileChange(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        try
        {
            var imageFiles = inputFileChangeEventArgs.GetMultipleFiles();
            var format = "image/png";

            foreach (var image in imageFiles)
            {
                var imageFile = await image.RequestImageFileAsync(format, 300, 300);
                var buffer = new byte[imageFile.Size];

                await imageFile.OpenReadStream().ReadAsync(buffer);

                var imagePath = $"data:{format}; base64, {Convert.ToBase64String(buffer)}";
                imagePaths.Add(imagePath);
                this.imageUrl = imagePath;
            }

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    private void RemoveFile(string file)
    {
        imagePaths.Remove(file);
    }
}

<style>
    #files {
        display: none;
    }

    #DropArea {
        padding: 50px 25px;
        margin: 30px auto;
        border: 1px dashed #c3c3c3;
        text-align: center;
        width: 100%;
        height: 220px;
        display: inline-flex;
    }
</style>