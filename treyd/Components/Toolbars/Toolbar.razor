@using DataLibrary
@using Microsoft.Extensions.Configuration
@using Syncfusion.Blazor.DropDowns

@inject IDataAccess _data
@inject IConfiguration _config
@inject StateContainer StateContainer

<div class="container p-3">
    <div class="row align-items-center justify-content-center">
        @if (IsLarge)
        {
            <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3 col-xl-3">
                <button class="btn btn-outline-info align-items-center justify-content-center text-center @filterActive" @onclick="@(() => GetLgSidebarToggle.InvokeAsync(ToggleSidebar()))"><i class="fa fa-filter"></i> Filtur</button>
            </div>
        }
        <div class="col-xs-6 col-sm-6 col-md-3 col-lg-3 col-xl-3">
            <SfTextBox CssClass="e-outline" Placeholder="Leita eftir vøru..." FloatLabelType="@FloatLabelType.Auto" @bind-Value="@SearchTerm" @oninput="@OnInput" @onkeyup="@(() => GetSearchTerm.InvokeAsync(SearchTerm))"></SfTextBox>
        </div>
        <div class="col-xs-6 col-sm-6 col-md-3 col-lg-3 col-xl-3">
            <SfDropDownList TValue="SortMethod" TItem="SortMethod" CssClass="e-outline" Placeholder="Vel sorteringshátt" DataSource="@SortMethods" @bind-Value="@SortBy" AllowFiltering="true">
                <DropDownListEvents TValue="SortMethod" TItem="SortMethod" OnValueSelect="OnSelect"></DropDownListEvents>
                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <div class="col-xs-12 col-sm-12 col-md-3 col-lg-3 col-xl-3 d-inline-flex justify-content-end">
            <button class="btn btn-outline-info btn_view_mode @listBtn" @onclick="ListMode"><i class="fa fa-bars"></i> List</button>
            &nbsp;&nbsp;
            <button class="btn btn-outline-info btn_view_mode @gridBtn" @onclick="GridMode"><i class="fa fa-th-large"></i> Grid</button>
        </div>
    </div>
</div>

@*Hetta skal verða við fyri at breakpoints virka í kotuni*@
<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="IsSmall" />
<MediaQuery Media="@Breakpoints.OnlyMedium" @bind-Matches="IsMedium" />
<MediaQuery Media="@Breakpoints.LargeUp" @bind-Matches="IsLarge" />

@code {
    // Responsive
    bool IsSmall = false;
    bool IsMedium = false;
    bool IsLarge = false;

    // Sorting
    public string SearchTerm { get; set; } = "";
    public SortMethod SortBy { get; set; }
    public bool toggleSidebar = true;


    // View Mode
    public string ViewMode { get; set; }
    public string listBtn;
    public string gridBtn;
    public string filterActive = "active";

    [Parameter] public EventCallback<string> GetSearchTerm { get; set; }
    [Parameter] public EventCallback<bool> GetLgSidebarToggle { get; set; }

    public bool ToggleSidebar()
    {
        if (toggleSidebar == true)
        {
            toggleSidebar = false;
            this.filterActive = "";
        }
        else
        {
            toggleSidebar = true;
            this.filterActive = "active";
        }

        return toggleSidebar;
    }

    public void GridMode()
    {
        ViewMode = "GridView";
        this.gridBtn = "active";
        this.listBtn = "";
        SetViewModeState();
    }

    public void ListMode()
    {
        ViewMode = "ListView";
        this.gridBtn = "";
        this.listBtn = "active";
        SetViewModeState();
    }

    protected override async Task OnInitializedAsync()
    {
        GridMode();
    }

    // @bind-value:event="oninput" is not supported by custom Blazor components, thus this is needed.
    public void OnInput(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        this.SearchTerm = args.Value.ToString();
    }

    public void OnSelect(SelectEventArgs<SortMethod> Args)
    {
        foreach (var sortMethod in SortMethods)
        {
            if (sortMethod.Name == Args.ItemData.Name)
            {
                SortBy = sortMethod;
                SetSortingState();
            }
        }
    }

    private void SetViewModeState()
    {
        StateContainer.GetViewModeState(ViewMode);
    }

    private void SetSortingState()
    {
        StateContainer.GetSortingMethodState(SortBy);
    }

    List<SortMethod> SortMethods = new List<SortMethod>
{
        new SortMethod() { SortMethodId = 1, Name = "Alfabetiskt", Ascending = true },
        new SortMethod() { SortMethodId = 2, Name = "Prísi", Ascending = true },
        new SortMethod() { SortMethodId = 3, Name = "Nýggjastu", Ascending = false },
        new SortMethod() { SortMethodId = 4, Name = "Elstu", Ascending = true },
    };
}