@using DataLibrary
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QuickPay.SDK

@inject IDataAccess _data
@inject IConfiguration _config
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer

<div class="form-signin" style="margin-top: 100px;">
    @if (displayAlert == true)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-4" role="alert">
            Royndin miseydnaðist! Royn aftur...
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <h1 class="h3 mb-3 fw-normal text-info text-center">Stovna brúkara</h1>
    <hr />
    <p class="text-center text-info">Vel tína støðu á treyd.fo</p>
    <div class="row">
        <div class="col">
            <a class="w-100 btn btn-lg btn-outline-success @customerBtn" type="button" @onclick="IsCustomer">
                Kundi
                <hr class="divider" />
                <span style="font-size: 12px;">keyp á treyd.fo</span>
            </a>
        </div>
        <div class="col">
            <a class="w-100 btn btn-lg btn-outline-success @companyBtn" type="button" @onclick="IsCompany">
                Fyritøka
                <hr class="divider" />
                <span style="font-size: 12px;">keyp og sel á treyd.fo</span>
            </a>
        </div>
    </div>
    <br />
    <EditForm Model="@User" OnValidSubmit="ValidateUser" style="@registerSection">
        <DataAnnotationsValidator />
        <div class="form-floating" style="@cName">
            <div class="input-2">
                <SfTextBox CssClass="e-outline" Placeholder="Navn á fyritøku" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@User.CompanyName"></SfTextBox>
                <ValidationMessage style="color: red;" For="@(() => User.CompanyName)" />
                <p style="color: red; @companyErrMsg">Fyritøka við givna navninum er longu skrásett á treyd.fo!</p>
            </div>
        </div>
        <div class="form-floating" style="@fName">
            <div class="input-2">
                <SfTextBox CssClass="e-outline" Placeholder="@fornavn" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@User.FirstName"></SfTextBox>
                <ValidationMessage style="color: red;" For="@(() => User.FirstName)" />
            </div>
        </div>
        <div class="form-floating" style="margin-top: 10px; @lName">
            <div class="input-2">
                <SfTextBox CssClass="e-outline" Placeholder="@eftirnavn" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@User.LastName"></SfTextBox>
                <ValidationMessage style="color: red;" For="@(() => User.LastName)" />
            </div>
        </div>
        <div class="form-floating" style="margin-top: 10px;">
            <div class="input-2">
                <SfTextBox CssClass="e-outline" Placeholder="Bústaður" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@User.Address"></SfTextBox>
                <ValidationMessage style="color: red;" For="@(() => User.Address)" />
            </div>
        </div>
        <div class="form-floating" style="margin-top: 10px;">
            <div class="input-2">
                <SfTextBox CssClass="e-outline" Placeholder="Býur/bygd" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@User.City"></SfTextBox>
                <ValidationMessage style="color: red;" For="@(() => User.City)" />
                @*<p style="color: red; @addressErrMsg">Hetta er ikki ein bygd/býur í Føroyum!</p>*@
            </div>
        </div>
        <div class="form-floating" style="margin-top: 10px;">
            <div class="input-2">
                <SfTextBox CssClass="e-outline" Placeholder="Postnummar" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@User.PostalCode"></SfTextBox>
                <ValidationMessage style="color: red;" For="@(() => User.PostalCode)" />
                @*<p style="color: red; @postalCodeErrMsg">Postnummarið er ikki rætt!</p>*@
            </div>
        </div>
        <div class="form-floating" style="margin-top: 10px;">
            <div class="input-2">
                <SfTextBox CssClass="e-outline" Placeholder="Teldupostur" Type="InputType.Email" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@User.Email"></SfTextBox>
                <ValidationMessage style="color: red;" For="@(() => User.Email)" />
                <p style="color: red; @emailErrMsg">Telduposturin er longu skrásettur á treyd.fo!</p>
            </div>
        </div>
        <div class="form-floating" style="margin-top: 10px;">
            <div class="input-2">
                <SfTextBox CssClass="e-outline" Placeholder="Loyniorð" Type="InputType.Password" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@User.Password"></SfTextBox>
                <ValidationMessage style="color: red;" For="@(() => User.Password)" />
            </div>
        </div>
        <div class="form-floating" style="margin-top: 10px;">
            <div class="input-2">
                <SfTextBox CssClass="e-outline" Placeholder="Vátta loyniorð" Type="InputType.Password" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@User.ConfirmPassword"></SfTextBox>
                <ValidationMessage style="color: red;" For="@(() => User.ConfirmPassword)" />
            </div>
        </div>

        @if (this.customerBtn == "active")
        {
            <div class="row">
                <div class="col">
                    <button class="w-100 btn btn-lg btn-info" type="submit">
                        Skráset brúkara
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-3">
                    <a class="w-100 btn btn-lg btn-info" type="button" @onclick="BackToSubscription">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </div>
                <div class="col-9">
                    <button class="w-100 btn btn-lg btn-info" type="submit">
                        Skráset kort og brúkara
                    </button>
                </div>
            </div>
        }
    </EditForm>
    <div style="@subscriptionSection">
        <p class="text-center text-info">Vel eina loysn, ið passar best til tína fyritøku</p>
        <div class="form-floating" style="margin-top: 10px;">
            <div class="input-2">
                <a class="w-100 btn btn-lg btn-outline-info @normalBtn" type="button" @onclick="Normal">
                    VANLIG LOYSN
                    <hr class="divider" />
                    KR 349/mðr
                    <ul class="list-unstyled" style="font-size: 16px;">
                        <br />
                        <li>SKRÁSETTAR VØRUR - 10 STK</li>
                        <li>MARKNAÐARFØRING - NEI</li>
                        <li>DAGSINS HANDIL - AVMARKAÐ</li>
                    </ul>
                </a>
            </div>
        </div>
        <div class="form-floating" style="margin-top: 10px;">
            <div class="input-2">
                <a class="w-100 btn btn-lg btn-outline-info @bestBtn" type="button" @onclick="Best">
                    BESTA LOYSN
                    <hr class="divider" />
                    KR 549/mðr
                    <ul class="list-unstyled" style="font-size: 16px;">
                        <br />
                        <li>SKRÁSETTAR VØRUR - ÓAVMARKAÐ</li>
                        <li>MARKNAÐARFØRING - JA</li>
                        <li>DAGSINS HANDIL - ÓAVMARKAÐ</li>
                    </ul>
                </a>
            </div>
        </div>
        <p style="color: red; @subscriptionErrMsg">Eingin loysn er vald!</p>
        <div class="form-floating" style="margin-top: 10px;">
            <div class="input-2">
                <a class="w-100 btn btn-lg btn-info" type="button" @onclick="ValidateSubscription">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </div>
        </div>
    </div>
    <hr />
    <p class="text-center text-info">ella</p>
    <a class="w-100 btn btn-lg btn-outline-info" type="submit" href="/rita_inn">Rita inn</a>
</div>

@code {
    private UserRegisterModel User { get; set; }

    private UserModel SubscribedUser { get; set; }
    private UserModel NewCustomer { get; set; }
    private AuthModel Auth { get; set; }

    private QuickPayClient QuickPayClient = new QuickPayClient(QuickPayConfig.API_KEY, QuickPayConfig.PRIVATE_KEY, QuickPayConfig.USER);

    private List<UserModel> Users;

    private string subscriptionSection;
    private string registerSection;

    private string companyBtn;
    private string customerBtn;
    private string normalBtn;
    private string bestBtn;

    private string cName;
    private string fName;
    private string lName;
    private string fornavn;
    private string eftirnavn;

    private string emailErrMsg;
    private string companyErrMsg;
    private string subscriptionErrMsg;

    private string queryStringEmail = "";

    private bool displayAlert = false;

    private int subscriptionFee = 0;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("em", out var queryStringEmail))
        {
            this.queryStringEmail = queryStringEmail.First();
        }

        IsCustomer();

        if (this.queryStringEmail != null && this.queryStringEmail != "")
        {
            await VerifySubscription();
        }
    }

    public void IsCustomer()
    {
        User = null;
        User = new UserRegisterModel();

        fornavn = "Fornavn";
        eftirnavn = "Eftirnavn";

        User.CompanyName = "-";
        User.Role = "Customer";

        this.subscriptionSection = "display: none;";
        this.registerSection = "display: initial;";
        this.customerBtn = "active";
        this.companyBtn = "";
        this.cName = "display: none;";
        this.fName = "display: initial;";
        this.lName = "display: initial;";
        this.emailErrMsg = "display: none;";
        this.companyErrMsg = "display: none;";
        this.subscriptionErrMsg = "display: none;";
        this.normalBtn = "";
        this.bestBtn = "";
        this.subscriptionFee = 0;
    }

    public void IsCompany()
    {
        User = null;
        SubscribedUser = null;

        User = new UserRegisterModel();
        SubscribedUser = new UserModel();

        fornavn = "Fornavn ábyrgdarhavarans";
        eftirnavn = "Eftirnavn ábyrgdarhavarans";

        User.CompanyName = "";
        User.Role = "Company";

        this.subscriptionSection = "display: initial;";
        this.registerSection = "display: none;";
        this.customerBtn = "";
        this.companyBtn = "active";
        this.cName = "display: initial;";
    }

    public void Normal()
    {
        this.subscriptionErrMsg = "display: none;";
        this.normalBtn = "active";
        this.bestBtn = "";
        this.subscriptionFee = TreydFeesConfig.SUBSCRIPTION_FEE_NORMAL;
    }

    public void Best()
    {
        this.subscriptionErrMsg = "display: none;";
        this.bestBtn = "active";
        this.normalBtn = "";
        this.subscriptionFee = TreydFeesConfig.SUBSCRIPTION_FEE_BEST;
    }

    public void ValidateSubscription()
    {
        if (this.subscriptionFee != 0)
        {
            this.subscriptionSection = "display: none;";
            this.registerSection = "display: initial;";
        }
        else
        {
            this.subscriptionErrMsg = "display: initial;";
        }
    }

    public void BackToSubscription()
    {
        this.subscriptionErrMsg = "display: none;";
        this.subscriptionSection = "display: initial;";
        this.registerSection = "display: none;";
    }

    protected async Task<bool> LoadUser()
    {
        try
        {
            string sql = "select * from users where Email = @Email";
            NewCustomer = await _data.QuerySingle<UserModel, dynamic>(
                sql, new { Email = User.Email }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> LoadUsers()
    {
        try
        {
            string sql = "select * from users";
            Users = await _data.LoadData<UserModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> LoadSubscribedUser()
    {
        try
        {
            string sql = "select * from users join subscriptions on users.UserID = subscriptions.UserID where Email = @Email";
            SubscribedUser = await _data.QuerySingle<UserModel, dynamic>(sql, new { Email = this.queryStringEmail }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(true);
        }
    }

    private async Task<bool> ValidateUser()
    {
        await LoadUsers();

        try
        {
            Dictionary<string, string> user_input = new Dictionary<string, string>();
            user_input.Add(User.City, User.PostalCode);

            // Gera ein ella annan logikk til at sanngilda býr/bygdir og postnummur

            //var matches = FirstDictionary.Keys.Intersect(SecondDictionary.Keys);

            if (Users != null && Users.Count > 0)
            {
                if (!Users.Exists(x => x.CompanyName.Equals(User.CompanyName)) || Users.Exists(x => x.CompanyName.Equals("-")))
                {
                    if (!Users.Exists(x => x.Email.Equals(User.Email)))
                    {
                        if (this.customerBtn == "active")
                        {
                            await InsertCustomer();
                            await SaveAddress();

                            string name = User.FirstName + " " + User.LastName;

                            var url = "/";

                            await AuthenticateUser(name, User.Role, User.Email, url);
                        }
                        else
                        {
                            await InsertCompany();
                            await CreateSubscription();
                        }
                    }
                    else
                    {
                        this.companyErrMsg = "display: none;";
                        this.emailErrMsg = "display: initial;";
                    }
                }
                else
                {
                    this.emailErrMsg = "display: none;";
                    this.companyErrMsg = "display: initial;";
                }
            }
            else
            {
                if (this.customerBtn == "active")
                {
                    await InsertCustomer();
                    await SaveAddress();

                    string name = User.FirstName + " " + User.LastName;

                    var url = "/";

                    await AuthenticateUser(name, User.Role, User.Email, url);
                }
                else
                {
                    await InsertCompany();
                    await CreateSubscription();
                }
            }

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    private async Task<bool> CreateSubscription()
    {
        try
        {
            string subFee = this.subscriptionFee + "00";

            string orderNumber = QuickPayConfig.GenerateOrderNumber();

            Dictionary<string, string> CreateSubscriptionVariables = new Dictionary<string, string>();
            Subscription subscription = null;

            CreateSubscriptionVariables.Add("address", User.Address);
            CreateSubscriptionVariables.Add("city", User.City);
            CreateSubscriptionVariables.Add("postal_code", User.PostalCode);
            CreateSubscriptionVariables.Add("email", User.Email);
            CreateSubscriptionVariables.Add("username", User.CompanyName);
            subscription = await QuickPayClient.Subscriptions.Create(
                orderNumber, "dkk", "Subscription", User.CompanyName, CreateSubscriptionVariables);

            PaymentLinkUrl subscriptionLink = await QuickPayClient.Subscriptions.CreateOrUpdatePaymentLink(
                subscription.Id, Int32.Parse(subFee), true, "en", "", QuickPayConfig.URL + "/stovna_brukara?em=" + User.Email,
                QuickPayConfig.URL + "/stovna_brukara?em=" + User.Email, QuickPayConfig.CALLBACKURL, true);

            if (subscriptionLink == null)
            {
                await DeleteUser(User.Email);

                NavigationManager.NavigateTo("stovna_brukara?em=" + User.Email);
            }
            else
            {
                NavigationManager.NavigateTo(subscriptionLink.Url);
            }

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    private async Task<bool> InsertCustomer()
    {
        try
        {
            byte[] salt = ((ITreydAuthenticationStateProvider)AuthenticationStateProvider).GetSalt();

            string passwordHash = ((ITreydAuthenticationStateProvider)AuthenticationStateProvider).HashPassword(User.Password, salt);

            string passwordSalt = Convert.ToBase64String(salt);

            string sql = "insert into users (CompanyName, FirstName, LastName, Password, PasswordSalt, Email, Role, Updated, Registered)" +
                    "values (@CompanyName, @FirstName, @LastName, @Password, @PasswordSalt, @Email, @Role, @Updated, @Registered);";

            await _data.SaveData(sql, new
            {
                CompanyName = "-",
                FirstName = User.FirstName,
                LastName = User.LastName,
                Password = passwordHash,
                PasswordSalt = passwordSalt,
                Email = User.Email,
                Role = User.Role,
                Updated = DateTime.Now,
                Registered = DateTime.Now
            }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    private async Task<bool> InsertCompany()
    {
        try
        {
            byte[] salt = ((ITreydAuthenticationStateProvider)AuthenticationStateProvider).GetSalt();

            string passwordHash = ((ITreydAuthenticationStateProvider)AuthenticationStateProvider)
                .HashPassword(User.Password, salt);

            string passwordSalt = Convert.ToBase64String(salt);

            string sql = "insert into users (CompanyName, FirstName, LastName, Password, PasswordSalt, Email, Role, Updated, Registered)" +
                    "values (@CompanyName, @FirstName, @LastName, @Password, @PasswordSalt, @Email, @Role, @Updated, @Registered);";

            await _data.SaveData(sql, new
            {
                CompanyName = User.CompanyName,
                FirstName = User.FirstName,
                LastName = User.LastName,
                Password = passwordHash,
                PasswordSalt = passwordSalt,
                Email = User.Email,
                Role = User.Role,
                Updated = DateTime.Now,
                Registered = DateTime.Now
            }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> VerifySubscription()
    {
        await LoadSubscribedUser();

        if (SubscribedUser != null)
        {
            try
            {
                var url = "/brukari/styripultur";

                await AuthenticateUser(SubscribedUser.CompanyName, SubscribedUser.Role, this.queryStringEmail, url);

                return await Task.FromResult(true);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);

                return await Task.FromResult(false);
            }
        }
        else
        {
            if (this.queryStringEmail != null && this.queryStringEmail != "")
            {
                await DeleteUser(this.queryStringEmail);

                this.displayAlert = true;
            }

            return await Task.FromResult(true);
        }
    }

    private async Task<bool> SaveAddress()
    {
        await LoadUser();

        try
        {
            string sql = "insert into addresses (Address, City, PostalCode, UserID, Registered)" +
                "values (@Address, @City, @PostalCode, @UserID, @Registered);";

            await _data.SaveData(sql, new
            {
                Address = User.Address,
                City = User.City,
                PostalCode = User.PostalCode,
                UserID = NewCustomer.UserID,
                Registered = DateTime.Now
            }
            , _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            await DeleteUser(User.Email);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> DeleteUser(string email)
    {
        try
        {
            string sql = "delete from users where Email = @Email";

            await _data.SaveData(sql, new { Email = email }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> AuthenticateUser(string name, string role, string email, string url)
    {
        try
        {
            Auth = new AuthModel
            {
                Name = name,
                Role = role,
                Email = email
            };

            ((ITreydAuthenticationStateProvider)AuthenticationStateProvider).SetAuthenticationState(Auth);

            StateContainer.SetIsLoggedOut(false);
            StateContainer.SetIsRegistered(true);

            NavigationManager.NavigateTo(url);

            await SessionStorage.SetAsync("user", Auth);

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }
}