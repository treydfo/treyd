@using DataLibrary
@using Microsoft.Extensions.Configuration

@inject IDataAccess _data
@inject IConfiguration _config

<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-8">
    <div class="col-12">
        <div class="card mb-3">
            <div class="card-header">
                <i class="fas fa-plus"></i> Skráset bólkar
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-12 my-auto">
                        <div class="prod">
                            <div class="row" style="text-align: center; justify-content: start">
                                <div class="container">
                                    <div class="col-md-12 col-lg-12">
                                        <EditForm Model="@Category" OnValidSubmit="@HandleValidSubmit">
                                            <DataAnnotationsValidator />
                                            <div class="row g-3">
                                                <div class="col-sm-6 mt-4">
                                                    <a class="w-100 btn btn-lg btn-outline-info @parentBtn" type="button" @onclick="IsCategory">
                                                        Skráset høvuðsbólk
                                                    </a>
                                                </div>
                                                <div class="col-sm-6 mt-4">
                                                    <a class="w-100 btn btn-lg btn-outline-info @childBtn" type="button" @onclick="IsSubCategory">
                                                        Skráset undirbólk
                                                    </a>
                                                </div>

                                                <div class="col-sm-12">
                                                    <SfTextBox CssClass="e-outline" Placeholder="@cName" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@Category.Name"></SfTextBox>
                                                    <ValidationMessage style="color: red;" For="@(() => Category.Name)" />
                                                    <p style="color: red; float: left; @nameErrMsg">Hesin bólkur er longu skrásettur</p>
                                                </div>

                                                <div class="col-12">
                                                    <SfTextBox CssClass="e-outline" Placeholder="Lýsing" FloatLabelType="@FloatLabelType.Auto" Multiline="true" @bind-Value="@Category.Description"></SfTextBox>
                                                    <ValidationMessage style="color: red;" For="@(() => Category.Description)" />
                                                </div>

                                                <div class="col-12" style="@cList">
                                                    <InputSelect id="category" class="form-control" @bind-Value="@Category.ParentCategory">
                                                        <option value="vel">Vel høvuðsvørubólk at bólka undir</option>
                                                        @if (Categories != null && Categories.Count != 0)
                                                        {
                                                            @foreach (var category in Categories)
                                                            {
                                                                if (category.ParentCategoryID == null)
                                                                {
                                                                    <option value="@category.Name">@category.Name</option>
                                                                }
                                                            }
                                                        }
                                                    </InputSelect>
                                                    <p style="color: red; float: left; @parentErrMsg">Høvuðsbólkur er kravdur her.</p>
                                                </div>
                                            </div>

                                            <hr class="my-4">

                                            <button class="w-100 btn btn-success btn-lg" type="submit">Skráset bólk</button>
                                        </EditForm>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer small text-muted">Updated yesterday at 11:59 PM</div>
        </div>
    </div>
</div>

@code {
    public CategoryModel Category { get; set; }

    private List<CategoryModel> Categories;

    private string parentBtn;
    private string childBtn;
    private string cName;
    private string cList;
    private string nameErrMsg;
    private string parentErrMsg;

    private int parentID;

    protected override async Task OnInitializedAsync()
    {
        IsCategory();

        await LoadCategories();
    }

    protected async Task<bool> LoadCategories()
    {
        try
        {
            string sql = "select * from categories";
            Categories = await _data.LoadData<CategoryModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    public void IsCategory()
    {
        Category = null;
        Category = new CategoryModel();

        this.cName = "Heiti á høvuðsbólki";

        this.parentBtn = "active";
        this.childBtn = "";
        this.cList = "display: none;";
        this.nameErrMsg = "display: none;";
        this.parentErrMsg = "display: none;";
    }

    public void IsSubCategory()
    {
        Category = null;
        Category = new CategoryModel();

        this.cName = "Heiti á undirbólki";

        this.parentBtn = "";
        this.childBtn = "active";
        this.cList = "display: initial;";
        this.nameErrMsg = "display: none;";
        this.parentErrMsg = "display: none;";
    }

    protected async Task<bool> HandleValidSubmit()
    {
        bool exists = false;

        if (Categories != null && this.Categories.Count > 0)
        {
            foreach (var category in Categories)
            {
                if (category.Name == Category.Name)
                {
                    exists = true;
                }
            }

            if (!exists)
            {
                if (this.parentBtn == "active")
                {
                    await SaveParentCategory();

                    return await Task.FromResult(true);
                }
                else
                {
                    if (Category.ParentCategory != null && Category.ParentCategory != "")
                    {
                        await SaveSubCategory();

                        return await Task.FromResult(true);
                    }
                    else
                    {
                        this.nameErrMsg = "display: none;";
                        this.parentErrMsg = "display: initial;";

                        return await Task.FromResult(false);
                    }
                }
            }
            else
            {
                this.parentErrMsg = "display: none;";
                this.nameErrMsg = "display: initial;";

                return await Task.FromResult(false);
            }
        }
        else
        {
            if (this.parentBtn == "active")
            {
                await SaveParentCategory();

                return await Task.FromResult(true);
            }
            else
            {
                if (Category.ParentCategory != null && Category.ParentCategory != "")
                {
                    await SaveSubCategory();

                    return await Task.FromResult(true);
                }
                else
                {
                    this.nameErrMsg = "display: none;";
                    this.parentErrMsg = "display: initial;";

                    return await Task.FromResult(false);
                }
            }
        }
    }

    private async Task<bool> SaveParentCategory()
    {
        try
        {
            string sql = "insert into categories (Name, Description, IsChecked, Expanded, HasSubCategories, Registered)" +
                "values (@Name, @Description, @IsChecked, @Expanded, @HasSubCategories, @Registered);";

            await _data.SaveData(sql, new
            {
                Name = Category.Name,
                Description = Category.Description,
                IsChecked = false,
                Expanded = false,
                HasSubCategories = false,
                Registered = DateTime.Now
            }
            , _config.GetConnectionString("default"));

            await OnInitializedAsync();

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    private async Task<bool> SaveSubCategory()
    {
        try
        {
            foreach (var category in Categories)
            {
                if (category.Name == Category.ParentCategory)
                {
                    this.parentID = category.CategoryID;
                }
            }

            string sql = "insert into categories (ParentCategoryID, Name, Description, IsChecked, Expanded, HasSubCategories, Registered)" +
            "values (@ParentCategoryID, @Name, @Description, @IsChecked, @Expanded, @HasSubCategories, @Registered);";

            await _data.SaveData(sql, new
            {
                ParentCategoryID = this.parentID,
                Name = Category.Name,
                Description = Category.Description,
                IsChecked = false,
                Expanded = false,
                HasSubCategories = false,
                Registered = DateTime.Now
            }
            , _config.GetConnectionString("default"));

            string sql1 = "update categories set HasSubCategories = @HasSubCategories where CategoryID = @CategoryID";

            await _data.SaveData(sql1, new
            {
                CategoryID = this.parentID,
                HasSubCategories = true
            }
            , _config.GetConnectionString("default"));

            await OnInitializedAsync();

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }
}