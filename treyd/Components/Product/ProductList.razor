@using DataLibrary
@using Microsoft.Extensions.Configuration
@using System.Linq

@implements IDisposable

@inject IDataAccess _data
@inject IConfiguration _config
@inject StateContainer StateContainer

<div class="modal-backdrop" style="@modalBackdropDisplay" />

@if (Products == null)
{
    <SfSpinner Size="40" Label="Lesur inn vørur" Type="SpinnerType.Material" Visible="true"></SfSpinner>
}
else
{
    <div class="prod">
        <div class="row" style="text-align: center; justify-content: start">
            @if (StateContainer.ViewMode == "GridView")
            {
                foreach (var product in ProcessedList())
                {
                    if (product.Published == true)
                    {
                        <div class="col-xs-6 col-sm-6 col-md-4 col-lg-4 col-xl-3 mt-4">
                            <Product ProductModel="product" GetBackdrop="@ToggleBackdrop" ViewMode="@StateContainer.ViewMode"></Product>
                        </div>
                    }

                }
            }
            else if (StateContainer.ViewMode == "ListView")
            {
                foreach (var product in ProcessedList())
                {
                    if (product.Published == true)
                    {
                        <Product ProductModel="product" GetBackdrop="@ToggleBackdrop" ViewMode="@StateContainer.ViewMode"></Product>
                    }
                }
            }
        </div>
    </div>
}

@code {
    private List<ProductModel> Products;

    [Parameter] public string SearchTerm { get; set; } = "";
    //[Parameter] public List<ProductModel> ProductList { get; set; }

    public string ViewMode { get; set; } = "GridView";

    private string modalBackdropDisplay = "display: none;";

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;

        await LoadProducts();
    }

    public void ToggleBackdrop(bool backdrop)
    {
        if (backdrop == true)
        {
            this.modalBackdropDisplay = "display: block;";
        }
        else if (backdrop == false)
        {
            this.modalBackdropDisplay = "display: none;";
        }
    }

    protected async Task<bool> LoadProducts()
    {
        try
        {
            string sql = "select * from products";
            Products = await _data.LoadData<ProductModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    public List<ProductModel> ProcessedList()
    {
        var query = Products;

        if (StateContainer.CategoryList != null && StateContainer.CategoryList.Count != 0)
        {
            query = query
            .Where(p => StateContainer.CategoryList.Any(category => category.Name.Equals(p.Category))).ToList();
        }
        else
        {
            if (StateContainer.Category != null && StateContainer.Category.Name != null)
            {
                query = query
                .Where(p => p.Category == StateContainer.Category.Name).ToList();
            }
        }

        if (SearchTerm != "" && SearchTerm != null)
        {
            query = query
            .Where(p => SearchTerm != null && p.Name.ToLower().Contains(SearchTerm.ToLower())).ToList();
        }

        if (StateContainer.PriceRange != null)
        {
            query = query
            .Where(p => StateContainer.PriceRange[0] < p.Price && StateContainer.PriceRange[1] > p.Price).ToList();
        }

        if (StateContainer.InStock == true)
        {
            query = query
            .Where(p => p.InStock == true).ToList();
        }

        if (StateContainer.SortMethod != null)
        {
            if (StateContainer.SortMethod.SortMethodId == 2) // Price
            {
                query = query.OrderBy(p => p.Price).ToList();
            }
            else if (StateContainer.SortMethod.SortMethodId == 1) // Name
            {
                query = query.OrderBy(p => p.Name).ToList();
            }
            else if (StateContainer.SortMethod.SortMethodId == 3) // Nýggjastu
            {
                query = query.OrderByDescending(p => p.DateAdded).ToList();
            }
            else if (StateContainer.SortMethod.SortMethodId == 4) // Elstu
            {
                query = query.OrderBy(p => p.DateAdded).ToList();
            }
        }

        return query;
    }
}

<style>
    .modal-backdrop {
        opacity: 0.5;
    }
</style>