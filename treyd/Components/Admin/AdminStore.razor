@using DataLibrary
@using Microsoft.Extensions.Configuration

@inject IDataAccess _data
@inject IConfiguration _config
@inject StateContainer StateContainer  

<EditForm Model="@StoreModel" OnValidSubmit="@ValidateStore">
    <div class="container-fluid p-0">
        <div class="container-fluid p-0 overflow-hidden" style="background-color: @mainColor; height: 40vh;">
            <div class="container align-items-center" style="width: 100%; height: 100%; background: url(@coverImagePath); background-position: 50% 50%; background-size: cover;">
                <div class="w-100 h-100">
                    <!-- Modal -->
                    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="exampleModalLabel">Set permumynd</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <SfTextBox CssClass="e-outline" Placeholder="Leinki til permumynd" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@StoreModel.CoverImagePath"></SfTextBox>
                                    @*<ValidationMessage style="color: red;" For="@(() => Store.CoverImagePath)" />*@
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Lat aftur</button>
                                    <button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="SetCoverImage">Goym</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="container" style="margin: -100px auto 20px auto; padding: 0 50px; border-radius: 20px; height: 250px;">
            <div class="container" style="background-color: white; margin: 0 auto 0 auto; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); border-radius: 20px; height: 100%;">
                <div class="h-100 row align-items-center justify-content-center">
                    <div class="h-100 col position-relative">

                    </div>
                    <div class="h-100 col text-center position-relative">
                        <div class="row justify-content-center text-info" style="margin-top: 120px; font-size: 30px;">
                            <strong>@Seller</strong>
                        </div>
                    </div>
                    <div class="h-100 col position-relative">

                    </div>
                </div>
                <div class="align-items-center overflow-hidden" style="width: 200px; height: 200px; background: url(@storeIconPath); box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); background-position: 50% 50%; background-size: cover; margin: -350px auto 0 auto; background-color: white; border: 4px solid @mainColor; border-radius: 50%;">
                    <!-- Modal -->
                    <div class="modal fade" id="exampleModal1" tabindex="-1" aria-labelledby="exampleModalLabel1" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="exampleModalLabel1">Set búmerki</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <SfTextBox CssClass="e-outline" Placeholder="Leinki til búmerki" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@StoreModel.StoreIconPath"></SfTextBox>
                                    @*<ValidationMessage style="color: red;" For="@(() => Store.StoreIconPath)" />*@
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Lat aftur</button>
                                    <button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="SetStoreIcon">Goym</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container" style="background-color: white; padding-top: 30px; z-index: -1;">
        <div class="row">
            <nav>
                <div class="nav nav-tabs flex-sm-row" id="nav-tab" role="tablist">
                    <button class="flex-sm-fill text-sm-center nav-link text-info active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true">Vørur</button>
                    <button class="flex-sm-fill text-sm-center nav-link text-info" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">Vørubólkar</button>
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">
                    <div class="flex-wrapper row wow fadeIn">
                        @if (Products != null)
                        {
                            <div class="prod">
                                <div class="row" style="text-align: center; justify-content: start">
                                    @foreach (var product in Products)
                                    {
                                        if (product.Published == true)
                                        {
                                            if (StateContainer.ViewMode == "GridView")
                                            {
                                                <div class="col-xs-6 col-sm-6 col-md-6 col-lg-3 col-xl-3 mb-4">
                                                    <Product ProductModel="product" ViewMode="GridView"></Product>
                                                </div>
                                            }
                                            else if (StateContainer.ViewMode == "ListView")
                                            {
                                                <Product ProductModel="product"></Product>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">
                    Vørubólkar
                </div>
            </div>
        </div>
    </div>

    <div class="admin-store-toolbar">
        <div class="h-100 d-table table-layout-fixed w-100">
            <div class="h-100 d-table-cell text-center p-2">
                <div class="row">
                    <label for="main-color" class="form-label text-info">Høvuðslitur</label>
                </div>
                <div class="row">
                    <SfColorPicker id="main-color" @bind-Value="mainColor"></SfColorPicker>
                </div>
            </div>
            <div class="h-100 d-table-cell text-center p-2">
                <span class="h-100 admin-store-toolbar-label">
                    <button type="button" class="w-100 h-100 btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#exampleModal">
                        Set permumynd
                    </button>
                </span>
            </div>
            <div class="h-100 d-table-cell text-center p-2">
                <span class="h-100 admin-store-toolbar-label">
                    <button type="button" class="w-100 h-100 btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#exampleModal1">
                        Set búmerki
                    </button>
                </span>
            </div>
            <div class="h-100 d-table-cell text-center p-2">
                <span class="h-100 admin-store-toolbar-label">
                    @if (StoreModel != null)
                    {
                        <button class="w-100 h-100 btn btn-outline-warning" type="submit">Dagfør</button>
                    }
                    else
                    {
                        <button class="w-100 h-100 btn btn-outline-success" type="submit">Goym</button>
                    }
                </span>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public string Seller { get; set; }

    private StoreModel StoreModel { get; set; }

    private List<ProductModel> Products;

    private string mainColor = "#0e3976;";
    private string coverImagePath;
    private string storeIconPath;

    private bool exists = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStore();
        await LoadProducts();
    }

    protected async Task<bool> LoadStore()
    {
        try
        {
            string sql = "select * from stores where Name = @Name";
            StoreModel = await _data.QuerySingle<StoreModel, dynamic>(sql, new { Name = this.Seller }, _config.GetConnectionString("default"));

            if (StoreModel != null)
            {
                this.exists = true;
                this.mainColor = StoreModel.MainColor;
                this.coverImagePath = StoreModel.CoverImagePath;
                this.storeIconPath = StoreModel.StoreIconPath;
            }

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    protected async Task<bool> LoadProducts()
    {
        try
        {
            string sql1 = "select * from products where Seller = @Seller";
            Products = await _data.LoadData<ProductModel, dynamic>(sql1, new { Seller = this.Seller }, _config.GetConnectionString("default"));

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }

    public void SetCoverImage()
    {
        this.coverImagePath = StoreModel.CoverImagePath;
    }

    public void SetStoreIcon()
    {
        this.storeIconPath = StoreModel.StoreIconPath;
    }

    private async Task<bool> ValidateStore()
    {
        if (this.exists)
        {
            await UpdateStore();

            return await Task.FromResult(true);
        }

        return await Task.FromResult(false);
    }

    private async Task<bool> UpdateStore()
    {
        try
        {
            string sql = "update stores set Name = @Name, UserID = @UserID, MainColor = @MainColor, " +
                "CoverImagePath = @CoverImagePath, StoreIconPath = @StoreIconPath, " +
                "Updated = @Updated, Registered = @Registered where StoreID = @StoreID";

            await _data.SaveData(sql, new
            {
                StoreID = StoreModel.StoreID,
                Name = StoreModel.Name,
                UserID = StoreModel.UserID,
                MainColor = this.mainColor,
                CoverImagePath = this.coverImagePath,
                StoreIconPath = this.storeIconPath,
                Updated = DateTime.Now,
                Registered = StoreModel.Registered
            }, _config.GetConnectionString("default"));

            await OnInitializedAsync();

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            return await Task.FromResult(false);
        }
    }
}
